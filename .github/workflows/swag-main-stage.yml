name: Deploy to Staging on Pull Request to Main

on:
  pull_request:
    branches:
      - main
    paths:
      - "apps/**"
      - "packages/**"

  workflow_dispatch:

jobs:
  check_source_branch:
    name: Check Source Branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            if (context.payload.pull_request.head.ref !== "next") {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## :exclamation: You can only merge into **\`main\`** from **\`next\`** not **\`${ context.payload.pull_request.head.ref}\`**.

                ### Please create a new pull request with the **\`next\`** branch as the source.`
              });

              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                state: "closed"
              });

              core.setFailed();
            } else {
              core.info("Head ref is next... continuing.");
            }
  get_changes:
    needs: check_source_branch
    name: Check File Changes
    runs-on: ubuntu-latest
    outputs:
      docs: ${{ steps.filter.outputs.docs }}
      web: ${{ steps.filter.outputs.web }}
      packages: ${{ steps.filter.outputs.packages }}
    steps:
      # - uses: actions/checkout@v2
      #   with:
      #     ref: ${{ github.head_ref }}
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docs:
              - 'apps/docs/**'
            web:
              - 'apps/web/**'
            packages:
              - 'packages/**'
  # do full build of monorepo. upload .next folder after build for each app
  # - always build monorepo no matter what changed. if nothing changed then it should >>> FULL TURBO <<<
  # - this way we can cache .npm folder after npm ci to hopefully speed up install
  # - and .turbo and .next folders after build
  # - and also this way we can split all this crap into seperate workflow files
  # - and only netlify deploy --build the changed apps
  # - https://docs.github.com/en/actions/using-workflows/reusing-workflows

  # `thing`-cache-`platform`-`fileHash`-`fileHashOptional`
  # where thing is the thing being cached... node, nextjs, .turbo, etc.
  # where platform is the OS... Linux, Windows, MacOS.
  # where fileHash is a hash of package-lock.json.
  # where fileHashOptional is a hash of any other files e.g all ts/tsx files.

  build:
    name: Build
    needs: get_changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Install Dependencies
        run: npm ci --ignore-scripts --prefer-offline --no-audit

      - name: Install netlify-cli
        run: npm install -D netlify-cli --ignore-scripts --prefer-offline --no-audit

      - name: Cache turbo cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/node_modules/.cache/turbo
          key: turbo-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: turbo-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Cache .next cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/apps/*/.next/cache
          key: nextjs-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: nextjs-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Code Standards
        run: |
          npm run format:check
          npm run lint

      - name: Build
        run: npm run build

      - name: Build for Netlify
        run: echo "npm run build:netlify"

      - name: Upload Build Artifacts
        run: echo "upload build artifacts - apps/*/package.json apps/*/_next apps/*/.netlify apps/*/.next"

  deploy_docs:
    name: Deploy Docs
    needs: [get_changes, build]
    if: ${{ needs.get_changes.outputs.docs == 'true' || needs.get_changes.outputs.packages == 'true' }}
    environment:
      name: staging:docs
      url: https://staging--ibcarr-testing.netlify.app
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Download docs build artifact - contains package.json, .next, _next and .netlify"
          echo "Install netlify-cli and @netlify/plugin-nextjs"

  deploy_web:
    name: Deploy Web
    needs: [get_changes, build]
    if: ${{ needs.get_changes.outputs.web == 'true' || needs.get_changes.outputs.packages == 'true' }}
    environment: staging:web
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Download web build artifact - contains package.json, .next, _next and .netlify"
          echo "Install netlify-cli and @netlify/plugin-nextjs"

  # build_and_deploy_docs:
  #   needs: get_changes
  #   name: Build and Deploy Docs
  #   if: ${{ needs.get_changes.outputs.docs == 'true' || needs.get_changes.outputs.packages == 'true' }}
  #   environment:
  #     name: staging
  #     url: https://staging--ibcarr-testing.netlify.app
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.head_ref }}

  #     - name: Setup Node v16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Cache .npm
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.npm
  #         key: npm-${{ hashFiles('package-lock.json') }}
  #         restore-keys: npm-

  #     - name: Install Dependencies
  #       run: npm ci --ignore-scripts

  #     - name: Install netlify-cli
  #       run: npm install --save-dev netlify-cli

  #     - name: Cache .next cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ github.workspace }}/apps/docs/.next/cache
  #         key: ${{ github.github.head_ref }}-docs-nextjs-cache-${{ github.job }}-${{ hashFiles('package-lock.json') }}
  #         restore-keys: ${{ github.github.head_ref }}-docs-nextjs-cache-${{ github.job }}-

  #     - name: Build
  #       run: npx turbo run build --cache-dir=.turbo --filter=@scope/docs

  #     - name: Deploy
  #       env:
  #         NETLIFY_SITE_ID: ${{ secrets.DOCS_SITE_ID }}
  #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  #       working-directory: ./apps/docs
  #       run: netlify deploy --build --alias staging

  #     - name: Comment on PR
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           await github.rest.issues.createComment({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             issue_number: context.issue.number,
  #             body: `## :heavy_check_mark: Pull Request Preview: **Docs**.

  #             ### This pull request preview for **\`docs\`** can be found [here](https://staging--ibcarr-testing.netlify.app).`
  #           });
